const translations = {
  // –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
  ru: {
    // Meta
    page_title: '–ù–∞—à–∞ –°–≤–∞–¥—å–±–∞ - –ù–∏–∫–∏—Ç–∞ –∏ –ü–æ–ª–∏–Ω–∞',
    // QR Overlay
    qr_prompt_line1: '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∞–π—Ç–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è',
    qr_prompt_line2: '–Ω–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR-–∫–æ–¥',
    // Hero
    hero_title: '–ù–∏–∫–∏—Ç–∞ –∏ –ü–æ–ª–∏–Ω–∞',
    hero_subtitle_prefix: '–Ω–µ',
    hero_subtitle_main: '–°–ª—É—á–∞–π–Ω—ã–µ',
    // Welcome
    welcome_title: '–î–æ—Ä–æ–≥–∏–µ –Ω–∞—à–∏ —Ä–æ–¥–Ω—ã–µ –∏ –¥—Ä—É–∑—å—è!',
    welcome_p1: '–° –æ–≥—Ä–æ–º–Ω–æ–π —Ä–∞–¥–æ—Å—Ç—å—é –º—ã —Ö–æ—Ç–∏–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞–∂–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º ‚Äì –º—ã —Å–æ–∑–¥–∞–µ–º —Å–µ–º—å—é!',
    welcome_p2: '–≠—Ç–æ—Ç –¥–µ–Ω—å –º—ã –º–µ—á—Ç–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å —Å–∞–º—ã–º–∏ –±–ª–∏–∑–∫–∏–º–∏ –∏ –ª—é–±–∏–º—ã–º–∏ –ª—é–¥—å–º–∏.',
    welcome_p3_line1: '–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å —Å—Ç–∞—Ç—å —Å–≤–∏–¥–µ—Ç–µ–ª—è–º–∏ –Ω–∞—á–∞–ª–∞ –Ω–∞—à–µ–π —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏',
    welcome_p3_line2: '–∏ –æ—Ç–ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏ —Ä–æ–∂–¥–µ–Ω–∏–µ –Ω–∞—à–µ–π —Å–µ–º—å–∏.',
    // Calendar
    calendar_when: '–ö–æ–≥–¥–∞?',
    calendar_sat: '–°—É–±–±–æ—Ç–∞',
    calendar_sun: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
    calendar_mon: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    calendar_month_june: '–∏—é–Ω—è',
    ticker_text: 'LOVE . –õ–Æ–ë–û–í–¨ . AMOUR . LIEBE ‚Ä¢ LOVE . –õ–Æ–ë–û–í–¨ . AMOUR . LIEBE ‚Ä¢ LOVE . –õ–Æ–ë–û–í–¨ . AMOUR . LIEBE ‚Ä¢ LOVE . –õ–Æ–ë–û–í–¨ . AMOUR . LIEBE ‚Ä¢ LOVE . –õ–Æ–ë–û–í–¨ . AMOUR . LIEBE ‚Ä¢ LOVE . –õ–Æ–ë–û–í–¨ . AMOUR . LIEBE',
    // Schedule
    schedule_title: '–ü—Ä–æ–≥—Ä–∞–º–º–∞',
    schedule_item1_time: '16:30',
    schedule_item1_event: 'Welcome-–∑–æ–Ω–∞',
    schedule_item1_details: '–í—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –∏ –ª–µ–≥–∫–∏—Ö –∑–∞–∫—É—Å–æ–∫.',
    schedule_item2_time: '17:00',
    schedule_item2_event: '–¶–µ—Ä–µ–º–æ–Ω–∏—è',
    schedule_item2_details: '–°–∞–º—ã–π —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–Ω—è.',
    schedule_item3_time: '18:00',
    schedule_item3_event: '–°–≤–∞–¥–µ–±–Ω—ã–π —Ñ—É—Ä—à–µ—Ç',
    schedule_item3_details: '–í—Ä–µ–º—è –≤–∫—É—Å–Ω–æ–π –µ–¥—ã, –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –∏ —Ç–∞–Ω—Ü–µ–≤!',
    schedule_item4_time: '23:00',
    schedule_item4_event: '–û–∫–æ–Ω—á–∞–Ω–∏–µ —Ñ—É—Ä—à–µ—Ç–∞',
    schedule_item4_details: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ –≤–µ—á–µ—Ä–∞.',
    // Location
    location_title: '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è',
    location_intro: '–ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ <strong>"Atmospher–µ"</strong>', // –í–∫–ª—é—á–∞–µ–º —Ç–µ–≥–∏, –æ–Ω–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è
    location_address: '–ê–¥—Ä–µ—Å: –≥. –¢—é–º–µ–Ω—å, —É–ª. –Ø–º—Å–∫–∞—è, 22',
    location_map_link: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ –¢—é–º–µ–Ω–∏',
    // Dress Code
    dresscode_title: 'Dress Code',
    dresscode_p1: '–ú—ã –±—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã, –µ—Å–ª–∏ –≤—ã –ø–æ–¥–¥–µ—Ä–∂–∏—Ç–µ —Å—Ç–∏–ª—å –Ω–∞—à–µ–π —Å–≤–∞–¥—å–±—ã –∏ –≤—ã–±–µ—Ä–µ—Ç–µ –Ω–∞—Ä—è–¥—ã –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π –≥–∞–º–º–µ.',
    dresscode_p2: '–ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ü–≤–µ—Ç–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ—Ç—Ç–µ–Ω–∫–æ–≤.',
    // RSVP
    rsvp_title: 'Check-in',
    rsvp_prompt: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –æ —Å–≤–æ–µ–º —Ä–µ—à–µ–Ω–∏–∏ –¥–æ 25 –º–∞—è 2025 –≥–æ–¥–∞.',
    rsvp_name_label: '–í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è:',
    rsvp_attendance_legend: '–°–º–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å?',
    rsvp_attend_yes: '–î–∞, —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–∏–¥—É!',
    rsvp_attend_no: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —Å–º–æ–≥—É',
    rsvp_drinks_legend: '–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–º –Ω–∞–ø–∏—Ç–∫–∞–º (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):',
    rsvp_drink_wine: '–í–∏–Ω–æ',
    rsvp_drink_whiskey: '–í–∏—Å–∫–∏',
    rsvp_drink_vodka: '–í–æ–¥–∫–∞',
    rsvp_drink_champagne: '–®–∞–º–ø–∞–Ω—Å–∫–æ–µ',
    rsvp_drink_non_alcoholic: '–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏',
    rsvp_submit_button: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç',
    // Contacts
    contacts_title: '–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?',
    contacts_organizer: '–ì–æ—Ç–æ–≤–∏—Ç–µ —Å—é—Ä–ø—Ä–∏–∑ –∏–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–≤–∞–¥—å–±–µ? –í–∞–º —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞—à –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –¢–∞—Ç—å—è–Ω–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ <a href="tel:+79088682503">+79088682503</a>',
    contacts_ps: 'P.S. –≠—Ç–æ—Ç —Å–∞–π—Ç –º—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ —Å–≤–æ–∏–º–∏ —Ä—É–∫–∞–º–∏ —Å –ª—é–±–æ–≤—å—é –¥–ª—è –Ω–∞—à–∏—Ö –≥–æ—Å—Ç–µ–π ‚ù§Ô∏è',
    // Footer
    footer_text: '–ù–∏–∫–∏—Ç–∞ –∏ –ü–æ–ª–∏–Ω–∞',
    // Music Prompt
    music_prompt: '–ù–∞–∂–º–∏—Ç–µ üéµ –¥–ª—è –º—É–∑—ã–∫–∏',
    // Map Widget (JavaScript fallback)
    map_widget_noscript: '–í–∏–¥–∂–µ—Ç –∫–∞—Ä—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç JavaScript. –í–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–∞—à–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞.'
  },
  // –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —è–∑—ã–∫
  fr: {
    // Meta
    page_title: 'Notre Mariage - Nikita et Polina',
    // QR Overlay
    qr_prompt_line1: 'Pour consulter le site d\'invitation,',
    qr_prompt_line2: 'scannez le QR-code avec votre cam√©ra',
    // Hero
    hero_title: 'Nikita et Polina',
    hero_subtitle_prefix: 'non',
    hero_subtitle_main: 'Accidentels',
    // Welcome
    welcome_title: 'Chers parents et amis !', // –í HTML "Chers famille et amis !", –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å RU
    welcome_p1: 'C\'est avec une immense joie que nous souhaitons partager un √©v√©nement important ‚Äì nous fondons une famille !',
    welcome_p2: 'Nous r√™vons de partager ce jour avec nos proches et amis les plus chers.', // –í HTML "les personnes les plus proches et les plus aim√©es", –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å RU
    welcome_p3_line1: 'Nous vous invitons √† √™tre t√©moins du d√©but de notre histoire commune',
    welcome_p3_line2: 'et √† c√©l√©brer avec nous la naissance de notre famille.',
    // Calendar
    calendar_when: 'Quand ?',
    calendar_sat: 'Samedi',
    calendar_sun: 'Dimanche',
    calendar_mon: 'Lundi',
    calendar_month_june: 'juin',
    ticker_text: 'LOVE . AMOUR . LIEBE ‚Ä¢ LOVE . AMOUR . LIEBE ‚Ä¢ LOVE . AMOUR . LIEBE ‚Ä¢ LOVE . AMOUR . LIEBE ‚Ä¢ LOVE . AMOUR . LIEBE ‚Ä¢ LOVE . AMOUR . LIEBE',
    // Schedule
    schedule_title: 'Programme',
    schedule_item1_time: '16:30', // –í—Ä–µ–º—è –æ—Å—Ç–∞—ë—Ç—Å—è
    schedule_item1_event: 'Accueil',
    schedule_item1_details: 'Moment pour accueillir les invit√©s et savourer des amuse-bouches.',
    schedule_item2_time: '17:00', // –í—Ä–µ–º—è –æ—Å—Ç–∞—ë—Ç—Å—è
    schedule_item2_event: 'C√©r√©monie',
    schedule_item2_details: 'Le moment le plus √©mouvant de la journ√©e.',
    schedule_item3_time: '18:00', // –í—Ä–µ–º—è –æ—Å—Ç–∞—ë—Ç—Å—è
    schedule_item3_event: 'Buffet de mariage',
    schedule_item3_details: 'Un temps de r√©jouissances, de f√©licitations et de danses !',
    schedule_item4_time: '23:00', // –í—Ä–µ–º—è –æ—Å—Ç–∞—ë—Ç—Å—è
    schedule_item4_event: 'Cl√¥ture du buffet',
    schedule_item4_details: 'Fin de la partie officielle de la soir√©e.',
    // Location
    location_title: 'Lieu de la c√©r√©monie',
    location_intro: 'Nous serons ravis de vous accueillir au restaurant <strong>"Atmosphere"</strong>', // –í–∫–ª—é—á–∞–µ–º —Ç–µ–≥–∏
    location_address: 'Adresse : Tyumen, rue Yamskaya, 22', // –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —É–ª–∏—Ü—ã –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
    location_map_link: 'Voir sur la carte de Tyumen',
    // Dress Code
    dresscode_title: 'Code vestimentaire',
    dresscode_p1: 'Nous vous serions reconnaissants de soutenir le style de notre mariage en choisissant des tenues dans la palette de couleurs propos√©e.',
    dresscode_p2: 'Il n\'est pas n√©cessaire d\'utiliser toutes les couleurs, un ou plusieurs tons suffisent.',
    // RSVP
    rsvp_title: 'Check-in', // –í HTML 'Confirmation', –Ω–æ 'Check-in' –±–ª–∏–∂–µ –∫ RU
    rsvp_prompt: 'Merci de nous informer de votre d√©cision avant le 25 mai 2025.',
    rsvp_name_label: 'Votre nom et pr√©nom :',
    rsvp_attendance_legend: 'Pourrez-vous √™tre pr√©sent ?',
    rsvp_attend_yes: 'Oui, je viendrai avec plaisir !',
    rsvp_attend_no: 'Malheureusement, je ne pourrai pas venir',
    rsvp_drinks_legend: 'Pr√©f√©rences en boissons alcoolis√©es (plusieurs choix possibles) :',
    rsvp_drink_wine: 'Vin',
    rsvp_drink_whiskey: 'Whisky',
    rsvp_drink_vodka: 'Vodka',
    rsvp_drink_champagne: 'Champagne',
    rsvp_drink_non_alcoholic: 'Boissons non alcoolis√©es',
    rsvp_submit_button: 'Envoyer la r√©ponse',
    // Contacts
    contacts_title: 'Des questions ?', // –í HTML 'Encore des questions ?', –Ω–æ —Ç–∞–∫ –±–ª–∏–∂–µ –∫ RU
    contacts_organizer: 'Vous pr√©parez une surprise ou vous avez des questions sur le mariage ? Notre organisatrice Tatiana se fera un plaisir de vous r√©pondre au <a href="tel:+79088682503">+79088682503</a>',
    contacts_ps: 'P.S. Ce site a √©t√© cr√©√© avec amour pour nos invit√©s ‚ù§Ô∏è',
    // Footer
    footer_text: 'Nikita et Polina',
    // Music Prompt
    music_prompt: 'Appuyez sur üéµ pour la musique',
    // Map Widget (JavaScript fallback)
    map_widget_noscript: 'Le widget de carte utilise JavaScript. Activez-le dans les param√®tres de votre navigateur.' // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –ø–µ—Ä–µ–≤–æ–¥, —Ç.–∫. –µ–≥–æ –Ω–µ –±—ã–ª–æ –≤ HTML
  }
};

// --- Language Switching Logic ---
const langRuButton = document.getElementById('lang-ru');
const langFrButton = document.getElementById('lang-fr');
const translatableElements = document.querySelectorAll('[data-translate-key]');

// Function to set the language
function setLanguage(lang) {
    if (!translations[lang]) {
        console.error(`Language "${lang}" not found in translations.`);
        return; // Exit if language doesn't exist
    }

    translatableElements.forEach(element => {
        const key = element.getAttribute('data-translate-key');
        if (translations[lang][key]) {
            // Handle elements that might contain HTML (like location_intro)
            if (key === 'location_intro' || key === 'contacts_ps' || key === 'contacts_organizer') {
                element.innerHTML = translations[lang][key];
            } else {
                element.textContent = translations[lang][key];
            }
        }
         else {
           // console.warn(`Translation key "${key}" not found for language "${lang}".`);
         } // Optional: Warn if a key is missing
    });

    // Update page title
    if (translations[lang]['page_title']) {
        document.title = translations[lang]['page_title'];
    }

    // Update HTML lang attribute
    document.documentElement.lang = lang;

    // Update button active state
    if (lang === 'fr') {
        langFrButton.classList.add('active');
        langRuButton.classList.remove('active');
    } else {
        langRuButton.classList.add('active');
        langFrButton.classList.remove('active');
    }

    // Save preference
    localStorage.setItem('preferredLanguage', lang);
}

// Event listeners for buttons
langRuButton.addEventListener('click', () => {
    if (!langRuButton.classList.contains('active')) { // Prevent action if already active
      setLanguage('ru');
    }
});

langFrButton.addEventListener('click', () => {
   if (!langFrButton.classList.contains('active')) { // Prevent action if already active
     setLanguage('fr');
   }
});

// Check for saved language on page load
const savedLang = localStorage.getItem('preferredLanguage');
const defaultLang = 'ru'; // Set default language

// --- End Language Switching Logic ---

document.addEventListener('DOMContentLoaded', () => {
    // --- Apply Language --- 
    // Determine initial language (saved or default) and apply it
    setLanguage(savedLang || defaultLang);
    // ----

    // --- Device Type Detection (Show QR on Desktop) ---
    const mainContent = document.getElementById('main-content');
    const qrOverlay = document.getElementById('desktop-qr-overlay');

    // Check if the primary input method is a mouse
    // Use try-catch for older browsers that might not support matchMedia or 'pointer'
    try {
        if (window.matchMedia && window.matchMedia('(pointer: fine)').matches) {
            // Likely a desktop/laptop with a mouse
            if (mainContent) mainContent.style.display = 'none';
            if (qrOverlay) qrOverlay.style.display = 'flex'; // Use flex to keep centering
        } else {
            // Likely a touch device (or fine pointer not detected)
            // Ensure defaults are set (might be redundant if CSS defaults are correct)
             if (mainContent) mainContent.style.display = 'block';
             if (qrOverlay) qrOverlay.style.display = 'none';
        }
    } catch (e) {
        console.warn("Could not determine pointer type, showing default content.", e);
        // Fallback: Ensure defaults are set if detection fails
        if (mainContent) mainContent.style.display = 'block';
        if (qrOverlay) qrOverlay.style.display = 'none';
    }
    // --- End Device Type Detection ---

    const musicPrompt = document.getElementById('music-prompt');
    let promptTimeout;

    // Function to hide the prompt
    const hideMusicPrompt = () => {
        if (musicPrompt) {
            musicPrompt.style.opacity = '0';
            musicPrompt.style.visibility = 'hidden';
        }
        if (promptTimeout) {
            clearTimeout(promptTimeout);
        }
    };

    // Show prompt on load (if it exists)
    if (musicPrompt) {
        // Small delay to ensure transition works
        setTimeout(() => {
            musicPrompt.style.opacity = '1';
            musicPrompt.style.visibility = 'visible';
        }, 100);
        // Set timeout to hide automatically
        promptTimeout = setTimeout(hideMusicPrompt, 8000); // Hide after 8 seconds
    }

    // Intersection Observer for fade-up animation
    const observerOptions = {
        threshold: 0.2 // Trigger when 20% of the element is visible
    };

    const observerCallback = (entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                // Apply fade-up visibility
                entry.target.classList.add('visible');

                // Remove check for schedule section
                /*
                if (entry.target.classList.contains('schedule')) {
                    entry.target.classList.add('animate-glasses');
                }
                */

                observer.unobserve(entry.target); // Stop observing once visible
            }
        });
    };

    const io = new IntersectionObserver(observerCallback, observerOptions);
    // Restore original observation logic
    document.querySelectorAll('.fade-up').forEach(el => io.observe(el));
    // Remove separate observation logic if it was added
    /*
    const scheduleSection = document.querySelector('.schedule');
    if (scheduleSection && !scheduleSection.classList.contains('fade-up')) {
        io.observe(scheduleSection);
    }
    */

    // Set current year in footer
    const currentYearElement = document.getElementById('current-year');
    if (currentYearElement) {
        currentYearElement.textContent = new Date().getFullYear();
    }

    // RSVP Form handling
    const form = document.getElementById('rsvp-form');
    const formStatus = document.getElementById('form-status');

    if (form) {
        form.addEventListener('submit', async (event) => {
            event.preventDefault(); // Prevent default form submission

            formStatus.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
            formStatus.style.color = '#333'; // Reset color
            const submitButton = form.querySelector('.submit-button');
            submitButton.disabled = true; // Disable button during sending

            // Collect form data
            const formData = new FormData(form);
            const data = {
                guestName: formData.get('guestName'),
                attendance: formData.get('attendance'),
                // Get all checked drink preferences
                drinks: Array.from(formData.getAll('drinks'))
            };

            try {
                // Send data to the Netlify function
                const response = await fetch('/.netlify/functions/telegram-sender', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data),
                });

                if (response.ok) {
                    const result = await response.json();
                    formStatus.textContent = '–°–ø–∞—Å–∏–±–æ, –≤–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
                    formStatus.style.color = 'green';
                    form.reset(); // Clear the form
                } else {
                    // Try to get error message from response body
                    let errorMessage = `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (${response.status})`;
                    try {
                         const errorResult = await response.json();
                         if(errorResult.error) errorMessage += `: ${errorResult.error}`;
                    } catch (e) {
                         // Ignore if response body is not JSON or empty
                    }
                     formStatus.textContent = errorMessage;
                     formStatus.style.color = 'red';
                }
            } catch (error) {
                console.error('Form submission error:', error);
                formStatus.textContent = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.';
                formStatus.style.color = 'red';
            } finally {
                 submitButton.disabled = false; // Re-enable button
            }
        });
    }

    // --- Music Toggle Button --- 
    const music = document.getElementById('bg-music');
    const toggleButton = document.getElementById('music-toggle-button');

    if (music && toggleButton) {
        // Simplified setup: Attach listener directly
        toggleButton.addEventListener('click', () => {
            // Hide prompt immediately when button is clicked
            hideMusicPrompt(); 

            if (music.paused) {
                // Attempt to play
                music.play().then(() => {
                    // Success
                    toggleButton.textContent = '‚è∏Ô∏è'; // Pause icon
                }).catch(error => {
                    console.error("Music play failed (could be initial block or load error):", error);
                    // Keep play icon if failed
                    toggleButton.textContent = 'üéµ'; 
                    // Optionally notify user that interaction might be needed again
                    // if (error.name === 'NotAllowedError') { 
                    //     alert("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∞–≤—Ç–æ-–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –µ—â–µ —Ä–∞–∑."); 
                    // } 
                });
            } else {
                music.pause();
                toggleButton.textContent = 'üéµ'; // Play icon
            }
        });

        // Update button icon based on actual audio state
        music.onpause = () => { toggleButton.textContent = 'üéµ'; };
        music.onplaying = () => { toggleButton.textContent = '‚è∏Ô∏è'; }; // Use onplaying for more reliability
        music.onended = () => { toggleButton.textContent = 'üéµ'; }; // Handle if loop is off or fails
        
        // Removed the setupMusicControls function and readyState/canplay checks
    }
    // --- End Music Toggle Button ---

}); // End of DOMContentLoaded 